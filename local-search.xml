<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在 WSL2 中使用 Clash for Windows 代理连接</title>
    <link href="/2022/10/05/clash-config-in-wsl/"/>
    <url>/2022/10/05/clash-config-in-wsl/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>本文撰写时基于的系统和版本是 Ubuntu 20.04, 如果你使用其他版本或其他发行版，则下文提到的部分步骤与你的实际情况可能有所出入。</p>          </div><p>在 WSL2 中配置环境时，依赖下载经常因为网络问题极其缓慢甚至失败。在整合了各方资料及个人实践后，我总结了在 WSL2 中通过 Clash for Windows 设置代理的方法，供大家参考。</p><h3 id="1-在-Clash-客户端内的操作"><a href="#1-在-Clash-客户端内的操作" class="headerlink" title="1. 在 Clash 客户端内的操作"></a>1. 在 Clash 客户端内的操作</h3><p>打开客户端的允许局域网连接 (Allow LAN) 开关，如图 1 所示。<br>记录下客户端内的端口 (Port)，如这里是 <code>16514</code>. 一般默认端口为 <code>7890</code>.<br><img src="https://s2.loli.net/2022/10/05/xJyYnRGNgtLviT9.png" alt="图 1"></p><h3 id="2-修改-bashrc"><a href="#2-修改-bashrc" class="headerlink" title="2. 修改 .bashrc"></a>2. 修改 <code>.bashrc</code></h3><p>使用文本编辑器编辑 <code>.bashrc</code>，在文件末尾根据第 1 步记录的数据，加入三行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">host_ip=$(<span class="hljs-built_in">cat</span> /etc/resolv.conf |grep <span class="hljs-string">&quot;nameserver&quot;</span> |<span class="hljs-built_in">cut</span> -f 2 -d <span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://<span class="hljs-variable">$host_ip</span>:[端口]&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://<span class="hljs-variable">$host_ip</span>:[端口]&quot;</span><br></code></pre></td></tr></table></figure><p>如图 2 所示，修改完后保存即可。<br><img src="https://s2.loli.net/2022/10/05/qWgwrFU7OMupiH2.png" alt="图 2"></p><h3 id="3-使-root-用户保留先前设置的环境变量"><a href="#3-使-root-用户保留先前设置的环境变量" class="headerlink" title="3. 使 root 用户保留先前设置的环境变量"></a>3. 使 root 用户保留先前设置的环境变量</h3><p>在使用 <code>sudo</code> 执行命令时，之前设置的环境变量并不会生效，需要进一步设置。<br>输入 <code>sudo visudo</code>, 加入以下内容并保存，如图 3 所示。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Defaults env_keep<span class="hljs-operator">=</span><span class="hljs-string">&quot;http_proxy https_proxy&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/10/05/z4Q9PwhFmgRLG8d.png" alt="图 3"></p><div class="note note-info">            <p>如果你使用 Ubuntu 22.04, 则你看到的内容可能与图 3 不同。如下图所示，取消相应行的注释 (删除行首的 <code>#</code>) 即可.<br><img src="https://s2.loli.net/2023/10/13/Dp628PahyF1jOVl.png" alt="图 3-1"></p>          </div><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>输入 <code>source ~/.bashrc</code> 使文件修改生效，可以通过输入 <code>echo $http_proxy</code> 验证修改是否成功。<br>输入 <code>wget www.google.com</code>, 可以发现连接成功，至此大功告成，如图 4 所示。<br><img src="https://s2.loli.net/2022/10/05/UIQ8LhuROaXq6S2.png" alt="图 4"></p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="https://zhuanlan.zhihu.com/p/153124468">为 WSL2 一键设置代理 (zhihu.com)</a><br><a href="https://www.chenyudong.com/archives/sudo-keep-env.html">sudo保持前用用户的env环境变量 (chenyudong.com, 已失效)</a></p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello, World!</title>
    <link href="/2022/03/07/hello-world/"/>
    <url>/2022/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>East Monster 的 Hexo 小站今天建起来了！😏</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
